from telegram import Update,  ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from test import get_questions_for_test
import json
import re
import os

TOKEN = "7949630541:AAEyGwfyP9xAtBwS9GxQg7lbiT3nxmMwpGM"

DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {"candidates": []}

    with open(DATA_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


def add_candidate(full_name, email, password, phone):
    data = load_data()
    data["candidates"].append({
        "full_name": full_name,
        "email": email,
        "password": password,
        "phone": phone
    })
    save_data(data)

def authenticate_candidate(email, password):
    data = load_data()
    return any(c["email"] == email and c["password"] == password for c in data["candidates"])

FULL_NAME, EMAIL, PASSWORD, PHONE, AUTH_EMAIL, AUTH_PASSWORD, CHOOSE_POSITION, CHOOSE_TEST_TYPE, CHANGE_ANSWER,  SHOW_HISTORY, ASK_QUESTION, SHOW_RESULTS = range(12)

MAIN_MENU = ReplyKeyboardMarkup([
    ["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
    ["üìã –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤"],
    ["üë§ –ü—Ä–æ—Ñ–∏–ª—å"]
], resize_keyboard=True)

POSITION_MENU = ReplyKeyboardMarkup([
    ["–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python"],
    ["–ù–∞–∑–∞–¥"]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
], resize_keyboard=True)

TEST_TYPE_MENU = ReplyKeyboardMarkup([
    ["üìå –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "üé≠ –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π"],
    ["üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"],
    ["–ù–∞–∑–∞–¥"]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
], resize_keyboard=True)

async def start(update: Update, context: CallbackContext):
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
        "üìå *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n"
        "1. üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
        "2. üìã –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "3. üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤.\n"
        "4. üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_message, reply_markup=MAIN_MENU, parse_mode="Markdown")

async def register(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return FULL_NAME

async def process_full_name(update: Update, context: CallbackContext):
    context.user_data["full_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def process_email(update: Update, context: CallbackContext):
    email = update.message.text
    if not re.match(r"[^@\s]+@[^@\s]+\.[^@\s]+", email):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return EMAIL
    context.user_data["email"] = email
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def process_password(update: Update, context: CallbackContext):
    password = update.message.text
    if len(password) < 6:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return PASSWORD

    context.user_data["password"] = password
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def process_phone(update: Update, context: CallbackContext):
    phone = update.message.text
    if not re.match(r"^\+?[1-9]\d{1,14}$", phone):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return PHONE

    context.user_data["phone"] = phone

    add_candidate(
        context.user_data["full_name"],
        context.user_data["email"],
        context.user_data["password"],
        context.user_data["phone"]
    )
    await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def authorize(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return AUTH_EMAIL

async def process_auth_email(update: Update, context: CallbackContext):
    context.user_data["email"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return AUTH_PASSWORD

async def process_auth_password(update: Update, context: CallbackContext):
    email = context.user_data["email"]
    password = update.message.text

    if authenticate_candidate(email, password):
        await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MAIN_MENU)

    return ConversationHandler.END

EDIT_PROFILE, EDIT_FULL_NAME, EDIT_EMAIL, EDIT_PASSWORD, EDIT_PHONE = range(5)

async def profile(update: Update, context: CallbackContext):
    email = context.user_data.get("email")
    if not email:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=MAIN_MENU)
        return

    data = load_data()
    candidate = next((c for c in data["candidates"] if c["email"] == email), None)
    if not candidate:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=MAIN_MENU)
        return

    profile_message = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üìù –§–ò–û: {candidate['full_name']}\n"
        f"üìß Email: {candidate['email']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {candidate['phone']}\n"
        f"üèÜ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(candidate.get('test_results', []))}\n"
    )
    await update.message.reply_text(profile_message, parse_mode="Markdown")

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    edit_options = [["–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", "–ò–∑–º–µ–Ω–∏—Ç—å email"], ["–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"], ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    await update.message.reply_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(edit_options, resize_keyboard=True)
    )
    return EDIT_PROFILE

async def edit_profile_choice(update: Update, context: CallbackContext):
    choice = update.message.text
    if choice == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return EDIT_FULL_NAME
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å email":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return EDIT_EMAIL
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return EDIT_PASSWORD
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return EDIT_PHONE
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return EDIT_PROFILE

async def update_full_name(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    elif update.message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    new_full_name = update.message.text
    email = context.user_data.get("email")
    data = load_data()
    for candidate in data["candidates"]:
        if candidate["email"] == email:
            candidate["full_name"] = new_full_name
            break
    save_data(data)
    await update.message.reply_text("–§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def update_email(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    elif update.message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    new_email = update.message.text
    if not re.match(r"[^@\s]+@[^@\s]+\.[^@\s]+", new_email):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return EDIT_EMAIL

    email = context.user_data.get("email")
    data = load_data()
    for candidate in data["candidates"]:
        if candidate["email"] == email:
            candidate["email"] = new_email
            break
    save_data(data)
    await update.message.reply_text("Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def update_password(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    elif update.message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    new_password = update.message.text
    email = context.user_data.get("email")
    data = load_data()
    for candidate in data["candidates"]:
        if candidate["email"] == email:
            candidate["password"] = new_password
            break
    save_data(data)
    await update.message.reply_text("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def update_phone(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    elif update.message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    new_phone = update.message.text
    email = context.user_data.get("email")
    data = load_data()
    for candidate in data["candidates"]:
        if candidate["email"] == email:
            candidate["phone"] = new_phone
            break
    save_data(data)
    await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def choose_position(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if "email" not in context.user_data:
        await update.message.reply_text(
            "‚ö† –û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=POSITION_MENU)
    return CHOOSE_POSITION

async def process_position_choice(update: Update, context: CallbackContext):
    if update.message.text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    context.user_data["position"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:", reply_markup=TEST_TYPE_MENU)
    return CHOOSE_TEST_TYPE

async def process_test_type(update: Update, context: CallbackContext):
    if update.message.text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=POSITION_MENU)
        return CHOOSE_POSITION

    context.user_data["test_type"] = update.message.text
    questions = get_questions_for_test(context.user_data["position"], context.user_data["test_type"])

    if not questions:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ context.user_data
    context.user_data["questions"] = questions
    context.user_data["current_question"] = 0
    context.user_data["answers"] = []

    return await ask_question(update, context)


async def ask_question(update: Update, context: CallbackContext):
    questions = context.user_data.get("questions", [])
    index = context.user_data.get("current_question", 0)

    if not questions:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END

    if index < len(questions):
        question = questions[index]
        keyboard = [[opt] for opt in question["options"]]
        if index > 0:  # –ù–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            keyboard.append(["–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç"])

        await update.message.reply_text(
            f"{question['text']}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        print(f"[DEBUG] –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {index + 1}")
        return ASK_QUESTION
    else:
        print("[DEBUG] –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        return await show_result(update, context)

async def process_answer(update: Update, context: CallbackContext):
    user_answer = update.message.text
    current_question_index = context.user_data.get("current_question", 0)
    questions = context.user_data.get("questions", [])

    print(f"[DEBUG] –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}")

    if not questions:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END

    if user_answer == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç":
        index = current_question_index - 1
        if index >= 0:
            question = questions[index]
            await update.message.reply_text(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n{question['text']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:",
                reply_markup=ReplyKeyboardMarkup([[opt] for opt in question["options"]], resize_keyboard=True)
            )
            context.user_data["changing_answer"] = True
            return CHANGE_ANSWER

    if context.user_data.get("changing_answer", False):
        context.user_data["answers"][-1]["user_answer"] = user_answer
        context.user_data["changing_answer"] = False
    else:
        if current_question_index < len(questions):
            question = questions[current_question_index]
            context.user_data.setdefault("answers", []).append({
                "question_text": question["text"],
                "user_answer": user_answer,
                "correct_answer": question["correct_answer"],
                "is_correct": user_answer == question["correct_answer"]
            })
        else:
            await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞.")
            return ConversationHandler.END

    context.user_data["current_question"] += 1
    if context.user_data["current_question"] >= len(questions):
        print("[DEBUG] –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return await show_result(update, context)

    print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É ({context.user_data['current_question'] + 1}).")
    return await ask_question(update, context)

def generate_pdf(test_results, file_path):
    font_path = "font/DejaVuSans.ttf"

    pdfmetrics.registerFont(TTFont('DejaVu', font_path))

    c = canvas.Canvas(file_path, pagesize=letter)
    width, height = letter

    c.setFont("DejaVu", 16)
    c.drawString(100, height - 40, "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ ")

    y_position = height - 80
    c.setFont("DejaVu", 12)
    c.drawString(100, y_position, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: {test_results['score']} ({test_results['percentage']:.2f}%)")
    y_position -= 20

    for result in test_results['answers']:
        c.drawString(100, y_position, f"–í–æ–ø—Ä–æ—Å: {result['question_text']}")
        y_position -= 15
        c.drawString(100, y_position, f"–í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}")
        y_position -= 15
        c.drawString(100, y_position, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['correct_answer']}")
        y_position -= 15
        c.drawString(100, y_position, f"–û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {'–î–∞' if result['is_correct'] else '–ù–µ—Ç'}")
        y_position -= 30

    c.save()
    return file_path

def save_test_result(email, position, test_type, score, percentage, answers):
    data = load_data()

    for candidate in data["candidates"]:
        if candidate["email"] == email:
            if "test_results" not in candidate:
                candidate["test_results"] = []

            candidate["test_results"].append({
                "position": position,
                "test_type": test_type,
                "score": score,
                "percentage": percentage,
                "answers": answers
            })
            break

    save_data(data)

RETRY_OR_MENU = range(1)

async def handle_retry_or_menu(update: Update, context: CallbackContext):
    choice = update.message.text
    if choice == "üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ context.user_data
        if "questions" not in context.user_data or not context.user_data["questions"]:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ
            questions = get_questions_for_test(context.user_data["position"], context.user_data["test_type"])
            if not questions:
                await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=MAIN_MENU)
                return ConversationHandler.END
            context.user_data["questions"] = questions

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
        context.user_data["current_question"] = 0
        context.user_data["answers"] = []
        return await ask_question(update, context)
    elif choice == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MAIN_MENU)
        return RETRY_OR_MENU

async def show_result(update: Update, context: CallbackContext):
    answers = context.user_data["answers"]
    total_questions = len(context.user_data.get("questions", []))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    score = sum(1 for answer in answers if answer["is_correct"])

    correct_answers = sum(1 for answer in answers if answer["is_correct"])
    percentage = (correct_answers / total_questions) * 100

    if percentage >= 90:
        result_category = "–í—ã—Å–æ–∫–∏–π"
        emoji = "üíØ"
    elif percentage >= 75:
        result_category = "–•–æ—Ä–æ—à–∏–π"
        emoji = "üôÇ"
    elif percentage >= 50:
        result_category = "–°—Ä–µ–¥–Ω–∏–π"
        emoji = "üòê"
    elif percentage >= 25:
        result_category = "–ù–∏–∑–∫–∏–π"
        emoji = "üôÅ"
    else:
        result_category = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π"
        emoji = "üòû"

    result_message = (
        f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"üèÜ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total_questions} ({percentage:.2f}% - {result_category} {emoji})\n\n"
    )
    await update.message.reply_text(result_message)

    email = context.user_data.get("email", "unknown_user")
    save_test_result(
        email=email,
        position=context.user_data["position"],
        test_type=context.user_data["test_type"],
        score=score,
        percentage=percentage,
        answers=answers
    )

    pdf_file_path = "test_result.pdf"
    test_results = {
        'score': score,
        'percentage': percentage,
        'answers': answers
    }
    generate_pdf(test_results, pdf_file_path)

    with open(pdf_file_path, "rb") as pdf_file:
        await update.message.reply_document(
            document=pdf_file,
            caption="–í–æ—Ç –≤–∞—à –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞:"
        )
    os.remove(pdf_file_path)

    retry_menu = ReplyKeyboardMarkup([
        ["üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)
    await update.message.reply_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=retry_menu
    )

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
    context.user_data.pop("current_question", None)
    context.user_data.pop("answers", None)
    context.user_data.pop("changing_answer", None)

    return RETRY_OR_MENU

async def clear_test_history(update: Update, context: CallbackContext):
    email = context.user_data.get("email")
    if not email:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    data = load_data()
    candidate = next((c for c in data["candidates"] if c["email"] == email), None)

    if not candidate or "test_results" not in candidate:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ —É–∂–µ –ø—É—Å—Ç–∞.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
    candidate["test_results"] = []
    save_data(data)

    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

HISTORY_OPTIONS = range(1)

async def handle_history_options(update: Update, context: CallbackContext):
    choice = update.message.text
    if choice == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        return await clear_test_history(update, context)
    elif choice == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MAIN_MENU)
        return HISTORY_OPTIONS

async def show_test_history(update: Update, context: CallbackContext):
    email = context.user_data.get("email")
    if not email:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    data = load_data()
    candidate = next((c for c in data["candidates"] if c["email"] == email), None)

    if not candidate or "test_results" not in candidate:
        await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç—ã.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    history_message = "üìú *–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤:*\n\n"
    for result in candidate["test_results"]:
        history_message += (
            f"üìå *{result['position']} ({result['test_type']})*\n"
            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['score']} –±–∞–ª–ª–æ–≤ ({result['percentage']}%)\n"
            "-------------------------\n"
        )

    history_menu = ReplyKeyboardMarkup([
        ["üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

    await update.message.reply_text(history_message, reply_markup=history_menu, parse_mode="Markdown")
    return HISTORY_OPTIONS


def main():
    app = Application.builder().token(TOKEN).build()

    registration_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è$"), register)],
        states={
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_full_name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_password)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)],
        },
        fallbacks=[]
    )
    auth_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è$"), authorize)],
        states={
            AUTH_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_auth_email)],
            AUTH_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_auth_password)],
        },
        fallbacks=[]
    )
    test_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìã –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç$"), choose_position)],
        states={
            CHOOSE_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_position_choice)],
            CHOOSE_TEST_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_test_type)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_answer)],
            CHANGE_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_answer)],
            RETRY_OR_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_retry_or_menu)],  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        },
        fallbacks=[]
    )
    edit_profile_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile)],
        states={
            EDIT_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_profile_choice)],
            EDIT_FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_full_name)],
            EDIT_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_email)],
            EDIT_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_password)],
            EDIT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_phone)],
        },
        fallbacks=[]
    )

    history_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤$"), show_test_history)],
        states={
            HISTORY_OPTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_history_options)],
        },
        fallbacks=[]
    )

    app.add_handler(history_handler)
    app.add_handler(edit_profile_handler)
    app.add_handler(MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(registration_handler)
    app.add_handler(auth_handler)
    app.add_handler(test_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
